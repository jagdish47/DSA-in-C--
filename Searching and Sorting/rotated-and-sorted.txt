class Solution {
public:

    int binarySearch(vector<int>nums, int s, int e, int target){

        while(s <= e){
            int mid = s + (e - s)/2;

            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                s = mid+1;
            }else{
                e = mid - 1;
            }
        }

        return -1;
    }

    int findPivot(vector<int>nums){

        int s = 0;
        int e = nums.size()-1;

        while(s < e){

            int mid = s + (e-s)/2;

            if(mid+1<nums.size() && nums[mid] > nums[mid+1]){
                return mid;
            }

            if(mid-1 >= 0 && nums[mid-1] > nums[mid]){
                return mid-1;
            }

            if(nums[s] > nums[mid]){
                e = mid-1;
            }
            else{
                s = mid;
            }
        }
        return s;
    }


    int search(vector<int>& nums, int target) {
        int pivot = findPivot(nums);

        if(target >= nums[0] && target <= nums[pivot]){
            int ans = binarySearch(nums, 0, pivot, target);
            return ans;
        }
        if(pivot < nums.size()-1 && target >= nums[pivot+1] && target <= nums[nums.size()-1]){
            int ans = binarySearch(nums, pivot+1, nums.size()-1, target);
            return ans;
        }

        return -1;
    }
};